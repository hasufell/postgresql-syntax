
{typecast}    {
          SET_YYLLOC();
          return TYPECAST;
        }

{dot_dot}   {
          SET_YYLLOC();
          return DOT_DOT;
        }

{colon_equals}  {
          SET_YYLLOC();
          return COLON_EQUALS;
        }

{equals_greater} {
          SET_YYLLOC();
          return EQUALS_GREATER;
        }

{less_equals} {
          SET_YYLLOC();
          return LESS_EQUALS;
        }

{greater_equals} {
          SET_YYLLOC();
          return GREATER_EQUALS;
        }

{less_greater}  {
          /* We accept both "<>" and "!=" as meaning NOT_EQUALS */
          SET_YYLLOC();
          return NOT_EQUALS;
        }

{not_equals}  {
          /* We accept both "<>" and "!=" as meaning NOT_EQUALS */
          SET_YYLLOC();
          return NOT_EQUALS;
        }

{self}      {
          SET_YYLLOC();
          return yytext[0];
        }

{operator}    {
          /*
           * Check for embedded slash-star or dash-dash; those
           * are comment starts, so operator must stop there.
           * Note that slash-star or dash-dash at the first
           * character will match a prior rule, not this one.
           */
          int     nchars = yyleng;
          char     *slashstar = strstr(yytext, "/*");
          char     *dashdash = strstr(yytext, "--");

          if (slashstar && dashdash)
          {
            /* if both appear, take the first one */
            if (slashstar > dashdash)
              slashstar = dashdash;
          }
          else if (!slashstar)
            slashstar = dashdash;
          if (slashstar)
            nchars = slashstar - yytext;

          /*
           * For SQL compatibility, '+' and '-' cannot be the
           * last char of a multi-char operator unless the operator
           * contains chars that are not in SQL operators.
           * The idea is to lex '=-' as two operators, but not
           * to forbid operator names like '?-' that could not be
           * sequences of SQL operators.
           */
          if (nchars > 1 &&
            (yytext[nchars - 1] == '+' ||
             yytext[nchars - 1] == '-'))
          {
            int     ic;

            for (ic = nchars - 2; ic >= 0; ic--)
            {
              char c = yytext[ic];
              if (c == '~' || c == '!' || c == '@' ||
                c == '#' || c == '^' || c == '&' ||
                c == '|' || c == '`' || c == '?' ||
                c == '%')
                break;
            }
            if (ic < 0)
            {
              /*
               * didn't find a qualifying character, so remove
               * all trailing [+-]
               */
              do {
                nchars--;
              } while (nchars > 1 &&
                 (yytext[nchars - 1] == '+' ||
                  yytext[nchars - 1] == '-'));
            }
          }

          SET_YYLLOC();

          if (nchars < yyleng)
          {
            /* Strip the unwanted chars from the token */
            yyless(nchars);
            /*
             * If what we have left is only one char, and it's
             * one of the characters matching "self", then
             * return it as a character token the same way
             * that the "self" rule would have.
             */
            if (nchars == 1 &&
              strchr(",()[].;:+-*/%^<>=", yytext[0]))
              return yytext[0];
            /*
             * Likewise, if what we have left is two chars, and
             * those match the tokens ">=", "<=", "=>", "<>" or
             * "!=", then we must return the appropriate token
             * rather than the generic Op.
             */
            if (nchars == 2)
            {
              if (yytext[0] == '=' && yytext[1] == '>')
                return EQUALS_GREATER;
              if (yytext[0] == '>' && yytext[1] == '=')
                return GREATER_EQUALS;
              if (yytext[0] == '<' && yytext[1] == '=')
                return LESS_EQUALS;
              if (yytext[0] == '<' && yytext[1] == '>')
                return NOT_EQUALS;
              if (yytext[0] == '!' && yytext[1] == '=')
                return NOT_EQUALS;
            }
          }

          /*
           * Complain if operator is too long.  Unlike the case
           * for identifiers, we make this an error not a notice-
           * and-truncate, because the odds are we are looking at
           * a syntactic mistake anyway.
           */
          if (nchars >= NAMEDATALEN)
            yyerror("operator too long");

          yylval->str = pstrdup(yytext);
          return Op;
        }
